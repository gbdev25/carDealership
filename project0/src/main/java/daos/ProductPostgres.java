package daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import models.Product;
import models.User;
import util.ConnectionUtil;

public class ProductPostgres implements ProductDAO {

	@Override
	public Product createProduct(Product p) {
		String sql = "insert into Product (Product_name, Product_description) values (?,?) returning Product_id;";
		try(Connection c = ConnectionUtil.getLocalConnection()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, p.getProduct_name());
			ps.setString(2, p.getProduct_description());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()) {
				p.getProduct_id();
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return p;
	}

	@Override
	public List<Product> retrieveProducts() {
		String sql = "select * from Product;";
		List<Product> product = new ArrayList<>();
		try(Connection c = ConnectionUtil.getLocalConnection()) {
			Statement statement = c.createStatement();
			ResultSet resultset = statement.executeQuery(sql);
			
			while (resultset.next()) {
				Product prod = new Product();
				prod.setProduct_id(resultset.getInt("Product_id"));
				prod.setProduct_name(resultset.getString("Product_name"));
				prod.setProduct_description(resultset.getString("Product_description"));
							
				product.add(prod);
				
			}
			
			
		} catch (SQLException e) {
		 e.printStackTrace();
		}
		return product;
		}
		@Override
		public List<Product> retrieveProductsCust() {
			String sql = "select * from Product;";
			List<Product> product = new ArrayList<>();
			try(Connection c = ConnectionUtil.getLocalConnection()) {
				Statement statement = c.createStatement();
				ResultSet resultset = statement.executeQuery(sql);
				
				while (resultset.next()) {
					System.out.println(resultset.getString("Product_id")+ "." + resultset.getString("Product_name"));
					}
								
			} catch (SQLException e) {
			 e.printStackTrace();
			}
			return product;
	}

	@Override
	public Product retrieveProductById(int Product_id) {
		String sql = "select * from Product where Product_Id = ?;";
		Product prod = null;
		
		try (Connection c = ConnectionUtil.getLocalConnection();){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, Product_id);
			ResultSet rs = ps.executeQuery();
			
			while (rs.next()) {
//				prod.setProduct_id(Product_id);
//				prod.setProduct_name(sql);
//				prod.setProduct_description(sql);
				System.out.println(rs.getString("Product_name"));
				System.out.println(rs.getString("Product_description"));
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
		return prod;
	}

	@Override
	public List<Product> retrieveProductsByUserId(int id) {
		String sql = "select *  product = ?;";
		List<Product> tasks = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getLocalConnection()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				Product t = new Product();
				t.setProduct_id(rs.getInt("Product_id"));
				t.setProduct_name(rs.getString("Product_name"));
				t.setProduct_description(rs.getString("description"));
				t.setProduct_price(rs.getInt("Product_price")); // rs.getDate returns a date that we have to convert to a local date
			
				
				User u = new User();
				u.setId(rs.getInt("user_assigned_id"));
				u.setUsername(rs.getString("username"));
				
				t.setProduct_owner(u);
				
				tasks.add(t);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return tasks;
	}
	

	@Override
	public boolean updateProduct(Product t) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteProductById(int Product_id) {
		String sql = "delete from Product where Product_id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getLocalConnection()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, Product_id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

}
